<%$
/* vim: set ts=4 sw=4: */

	/**
	 *  @file	view_nx_revision1.csp
 	 *	@author	신옥식 (os.shin@navercorp.com)
	 *
	 *	Copyright reserved.
	*/

	#include "global.h"


char **vec_sv_log;
UfMapStr *map_sv_log;
char *sv_log_cr_log_total;

static int view_nx_element(request_rec *, UfXmlElement *, int , char *, bool);
static int view_nx_meta(request_rec *, char *);
static int view_nx_header(request_rec *r, char *);
static int view_nx_footer(request_rec *r);
static int init_meta_log(request_rec *);
static int finalize_meta_log();
static int add_nx_meta_logs(request_rec *r, int rank, char *cr_log_letter, char *gdid, char *similarity, const char *cr_prefix);
static char *get_nx_author_list(request_rec *r, UfXmlElement *, int);
static char * make_tv_thumbnail_url(apr_pool_t *p, char * url);
static int view_STT_markup(request_rec *r, char *key, char *url);


//최대 3명 노출 후, 외 n명 표시
#define MAX_DISPLAY_AUTHOR 3

#define THUMB_WIDTH 68
#define THUMB_HEIGHT 92


#define	CSP_DECL int	view_nx_revision1(request_rec *r, UfXmlElement *xml_result)
%><%
DBG_LOG("# view_nx_revision1\n");
	if (xml_result==NULL)
	{
		DBG_LOG("# xml_result==NULL\n");
		return 0;
	}


	char *cr_prefix = "bsl";

	int		item_count			= UF_MIN(uf_xml_lookupd_cnt(xml_result, "bookList.book#", 0), DISPLAY_NX);

	//NOTE:3개 이상일때만 노출
	if (item_count < 3)
	{
		return 0;
	}

    init_meta_log(r);


	if (item_count > 0)
	{

		char *category_name = gt_context.category_name;


		//shuffled book index to display
		int arr_book_idx_base[DISPLAY_BOOK_API];
		int arr_book_idx_shuffled[DISPLAY_NX];
		int idx;

		for(idx=0; idx<DISPLAY_BOOK_API; idx++)
		{
			arr_book_idx_base[idx] = idx;
		}
		for(idx=0; idx<DISPLAY_NX; idx++)
		{
			arr_book_idx_shuffled[idx] = -2;
		}

		for(idx=0; idx<DISPLAY_NX; idx++)
		{
			int choiced_value = -1;
			int choiced_idx = -1;
			int cnt_loop = 0;
			while(choiced_value==-1)
			{
				//0 to DISPLAY_BOOK_API-1
				choiced_idx = rand() % DISPLAY_BOOK_API;
				choiced_value = arr_book_idx_base[choiced_idx];
				DBG_LOG("# choiced vars:%d, %d\n", choiced_idx, choiced_value);
				cnt_loop++;
				if(cnt_loop>99) break;
			}
			if(choiced_idx>=0)
			{
				arr_book_idx_base[choiced_idx] = -1;
				arr_book_idx_shuffled[idx] = choiced_value;
			}

		}

		DBG_LOG("## shuffled value:\n");
		for(idx=0; idx<DISPLAY_NX; idx++)
		{
			DBG_LOG("%d, ", arr_book_idx_shuffled[idx]);
		}
		DBG_LOG("\n");


		//썸네일이 2개 이하이면, 노출제외
		//썸네일이 3개 이상인지 체크, 썸네일이 없으면 제외
		int cnt_exist_thumbnail = 0;
		for(int idx=0; idx<item_count; idx++)
		{
			int idx_to_display = arr_book_idx_shuffled[idx];
			if(idx_to_display>=0)
			{
				UfXmlElement    *item   = UF_XML_ELEMENT(uf_xml_lookup(xml_result, "bookList.book[%]", idx_to_display));
				char *thumb_url = uf_xml_lookupd(item, "thumbnail_url_1*", "");
				if(UF_ISSET(thumb_url))
				{
					cnt_exist_thumbnail++;
				}
			}
		}

		if(cnt_exist_thumbnail<=2)
		{
			DBG_LOG("thumbnail 개수가 2개이하로 노출제외\n");
			return 0;
		}


		BEGIN_COMPACTHTML


		view_nx_header(r, category_name);


		for(int idx=0; idx<item_count; idx++)
		{
			int idx_to_display = arr_book_idx_shuffled[idx];
			if(idx_to_display>=0)
			{
				UfXmlElement    *item   = UF_XML_ELEMENT(uf_xml_lookup(xml_result, "bookList.book[%]", idx_to_display));
				int rank = idx+1;
				view_nx_element(r, item, rank, cr_prefix, true);
			}
		}
		view_nx_footer(r);

		END_COMPACTHTML
	}

	/**
	 *	노출로그
	 */
    view_nx_meta(r, "");


   	finalize_meta_log();

%>



<%$
#define CSP_DECL int view_nx_element(request_rec *r, UfXmlElement *item, int rank, char *cr_prefix, bool b_show_exist_thumb)
%><%
	apr_pool_t *p = r->pool;

    char *gdid          = uf_xml_lookupd(item, "gdid*", "");
	char *similarity    = uf_xml_lookupd(item, "similarity*", "");

	char *cr_log_letter = "";

	char *bid = uf_xml_lookupd(item, "bid*", "");
	char *title = uf_xml_lookupd(item, "title*", "");
	char *publish_day = uf_xml_lookupd(item, "publish_day*", "");
	char *thumb_url = uf_xml_lookupd(item, "thumbnail_url_1*", "");
	char *book_detail_url = uf_xml_lookupd(item, "book_detail_url*", "");
	char *adult_yn = uf_xml_lookupd(item, "adult_yn*", "N");
	char *volume = uf_xml_lookupd(item, "volume*", "");

	//성인 도서는 로그인 하지 않았으면 노출제외
	if ( UF_ISEQUAL(adult_yn, "Y") && gt_context.p_adultcheck==0 )
	{
		DBG_LOG("성인도서는 로그인 하지 않았으면 노출제외");
		return 0;
	}

	if(b_show_exist_thumb)
	{
		if (UF_ISNSET(thumb_url))
		{
			DBG_LOG("thumbnail이 없으면 노출제외\n");
			return 0;
		}
	}

	char *tv_thumb_url = make_tv_thumbnail_url(p, thumb_url);

	UfXmlElement *xml_authorlist = UF_XML_ELEMENT(uf_xml_lookup(item, "author_list"));
DBG_LOG("svc url:%s", book_detail_url);
	/*--------------------------------------------------
	* char *item_type	= uf_xml_lookupd(item, "type*", "");
	*--------------------------------------------------*/

	char *markup_volume = "";

	if( UF_ISSET(volume) )
	{
		markup_volume = uf_sprintf(p, "<span class='num'><em>%s</em></span>", volume);
	}

	char *markup_title = uf_strcurtail(p, title, 17, 3, "...", NULL, UF_UTF8, 0);
 	char *onclick_scr_title = make_cr(p, cr_prefix, "tit", gdid, rank, CR_NORMAL);
 	char *onclick_scr_thumbnail = make_cr(p, cr_prefix, "img", gdid, rank, CR_NORMAL);

	char *markup_author = get_nx_author_list(r, xml_authorlist, MAX_DISPLAY_AUTHOR);

	char *markup_author_curtailed = uf_strcurtail(p, markup_author, 17, 3, "...", NULL, UF_UTF8, 0);
%>
	<li>
		<span class="thumb_wrap"><a href="<%=book_detail_url%>" class="thumb" target="_blank" onclick="<%=onclick_scr_thumbnail%>"><img src="<%=tv_thumb_url%>" alt="<%=title%>"  onError="on_noimage_bestseller(this, 75, 108);"><span class="mask"></span></a><span class="thumb_v"></span></span>
		<dl class="book_dsc">
			<dt><a href="<%=book_detail_url%>" title="<%=title%>" target="_blank" onclick="<%=onclick_scr_title%>"><%=markup_title%> <%=markup_volume%></a> <span></span></dt>
			<dd title="<%=markup_author%>"><%=markup_author_curtailed%></dd>
			<dd class="date"><%=publish_day%></dd>
		</dl>
<%

	if(gt_context.p_dkey)
	{
		char *trimmed_query = uf_htmlescape(r->pool, gt_context.p_query);
		trimmed_query = uf_strreplace(r->pool, trimmed_query, " ", "");
		view_STT_markup(r, trimmed_query, bid);
	}

%>
	</li>
<%




	add_nx_meta_logs(r, rank, cr_log_letter, gdid, similarity, cr_prefix);
%>


<%$
#define CSP_DECL int view_nx_header(request_rec *r, char *category_name)
%><%



%>
	<div class="book_detail section">
		<div class="section_head">
			<h2><%=category_name%> 베스트셀러</h2>
			<div class="dsc_ncaution2">
				<a href="javascript:void(0)" class="ico_ad_dsc" id="id_icon_ag_bestseller2_prs" title="이 정보가 표시된 이유" onClick="toggle_popup_layer_bestseller2_prs('id_popup_ag_bestseller2_prs'); return false;">이 정보가 표시된 이유</a>
				<div class="ly_ad_dsc" id="id_popup_ag_bestseller2_prs" style="display: none;">
					<span class="ico_arr">&nbsp;</span>
					<p>네이버가 운영하는 책 서비스입니다.</p>
					<button type="button" class="bt_ad_clse" title="안내 레이어 닫기" onClick="toggle_popup_layer_bestseller2_prs('id_popup_ag_bestseller2_prs'); return false;">안내 레이어 닫기</button>
				</div>
			</div>
			<div class="dsc_ninfo">다른 사이트를 보시려면 <a href="https://search.naver.com/search.naver?where=site&sm=tab_bok&ie=utf8&query=%EB%8F%84%EC%84%9C%EA%B0%80%EA%B2%A9%EB%B9%84%EA%B5%90%EC%82%AC%EC%9D%B4%ED%8A%B8+-%EB%84%A4%EC%9D%B4%EB%B2%84">여기</a>를 누르세요.</div>
		</div>

<%
	if(gt_context.p_dkey) {
%>
		<div id="del_btn0_bookbestseller"></div>
<%
	}
%>
		<ul class="lst_book2">

<%
//	##### end of view_nx_header
%>


<%$
#define CSP_DECL int view_nx_footer(request_rec *r)
%><%


%>
		</ul>
<%
	if(gt_context.p_dkey) {
%>
		<div id="del_btn1_bookbestseller"></div>
<%
	}
%>
	</div>

<script language="javascript">
    function on_noimage_bestseller(img, width, height)
    {
        img.onerror=null;
        img.src = "http://sstatic.naver.net/search/images11/blank.gif";
        img.width = width;
        img.height = height;
        img.alt = "이미지 준비중";

        img.className ='bg_nimg2';

        return;
    }


function toggle_popup_layer_bestseller2_prs(id_el)
{
    var el = document.getElementById(id_el);
    if(el) {
        if (el.style.display === 'none') {
            el.style.display = 'block';
        } else {
            el.style.display = 'none';
        }
    }
}

function bestseller2_prs_check_tooltip(f, g) {
	var b, e, d;
	for (var c = 0, a = g.length; c < a; c++) {
	 b = g[c];
	 e = $(b[0]);
	 d = $(b[1]);
	 if (e != null && d != null && f == e || $Element(f).isChildOf(e) || f == d || $Element(f).isChildOf(d)) {} else {
	   d.style.display = "none";
	 }
	}
}

 $Fn(function(e) {
   var elTarget = e.element;
   var aTooltipList = [
     ["id_icon_ag_bestseller2_prs", "id_popup_ag_bestseller2_prs"]
   ];
   bestseller2_prs_check_tooltip(elTarget, aTooltipList);
 }).attach(document, "click");

</script>
<%
//	##### end of view_nx_footer
%>




<%$
//metalog관련값을 초기화 한다
#define CSP_DECL int init_meta_log(request_rec *r)
%><%

    vec_sv_log =  uf_vector_str_new(r->pool, 0);
    map_sv_log = uf_map_str_new_ordered(r->pool);
    sv_log_cr_log_total = "";
%>



<%$
#define CSP_DECL int finalize_meta_log()
%><%
    map_sv_log = NULL;
    vec_sv_log = NULL;
    sv_log_cr_log_total = NULL;
%>

<%$
//display meta info
#define CSP_DECL int view_nx_meta(request_rec *r, char *more_url)
%><%
    printf("\n");
    printf(NX_METALOG_HEADER_ID);
    printf("\n");

    int idx;
    char *val;
    char *bottom_link = more_url;
    const char *svc_name = "";


    //format sample
    //sv_log:doc*pe,5
    int len_svlog = uf_vlen(vec_sv_log);
    printf("sv_log:%s,%d\n", sv_log_cr_log_total, len_svlog);
    for(idx=0; idx<len_svlog; idx++)
    {
        val = uf_vector_str_get(vec_sv_log, idx);
        printf("%s\n", val);
    }

	printf("column:2\n");
    printf("bottom_title:%s\n", svc_name);
    printf("card_title:%s\n", svc_name);
	if(UF_ISSET(bottom_link))
    	printf("bottom_link:%s\n", bottom_link);





    printf("\n");
    printf("-->");
    printf("\n");

%>

<%$
//통검용 meta log를 남긴다
#define CSP_DECL int add_nx_meta_logs(request_rec *r, int rank, char *cr_log_letter, char *gdid, char *similarity, const char *cr_prefix)
%><%

    //format sample
    //r1:doc*p,88000049_00000000000000000229FCD1,1:0.332357
	char *cr_log = "";

	if(UF_ISSET(cr_log_letter))
{
	cr_log = uf_sprintf(r->pool, "*%s", cr_log_letter);
}

    const char *click_id_prefix = cr_prefix;
    char *val = uf_sprintf(r->pool, "r%d:%s%s,%s:%s",
            rank,
            click_id_prefix,
            cr_log,
            gdid,
            similarity
            );

    vec_sv_log = uf_vector_str_append(vec_sv_log, val);

    //키가 없으면 추가
    if(!uf_map_str_has_key (map_sv_log, cr_log_letter))
    {
        uf_map_str_add(map_sv_log, cr_log_letter, "");
        if(strlen(sv_log_cr_log_total)==0)
        {
            sv_log_cr_log_total = uf_sprintf(r->pool, "%s%s",
                    click_id_prefix,
                    cr_log
                    );
        } else
        {
            sv_log_cr_log_total = uf_sprintf(r->pool, "%s%s",
                    sv_log_cr_log_total,
                    cr_log_letter
                    );
        }
    }

%>






<%$
#define CSP_DECL char *get_nx_author_list(request_rec *r, UfXmlElement *xml_author_list, int max_to_display)
%><%

	char *markup_author = "";

	int		item_count			= uf_xml_lookupd_cnt(xml_author_list, "author#", 0);
	int		item_count_to_display	= UF_MIN( item_count, max_to_display );

DBG_LOG("\n# author cnt:%d\n", item_count);
	int cnt_displayed = 0;

	for(int idx=0; idx<item_count_to_display; idx++)
	{
		UfXmlElement *xml_author = UF_XML_ELEMENT(uf_xml_lookup(xml_author_list, "author[%]", idx));
		char *name = uf_xml_lookupd(xml_author, "name*", "");
		DBG_LOG("name:%s\n", name);
		cnt_displayed++;
		markup_author = uf_sprintf(r->pool, "%s%s", markup_author, name);
		if (idx<item_count_to_display-1)
		{
			markup_author = uf_sprintf(r->pool, "%s, ", markup_author);
		}

	}

	//저자 개수가 출력한것보다 클때
	if( item_count > cnt_displayed )
	{
		markup_author = uf_sprintf(r->pool, "%s 외 %d명", markup_author, item_count - cnt_displayed);
	}


	return markup_author;
%>

<%
// #####	end of get_nx_author_list
%>





<%$
#define CSP_DECL char * make_tv_thumbnail_url(apr_pool_t *p, char * url)
%><%
    char * img_url = uf_sprintf(p, "https://search.pstatic.net/common/?src=%s&type=o68_92_re24", uf_urlencode(p, url));
    return img_url;
%>










<%$
//STT용 마크업을 생성한다
#define CSP_DECL int view_STT_markup(request_rec *r, char *_key1, char *_key2)
%><%
	char *key1 = _key1;
	char *key2 = _key2;
	char *key3 = "";
	char *ref = "";
	char *kind = "bookbestseller";

	//5개의 ,로 구분한 format이 유지되어야 함
%>

	<div id='del_bookbestseller' name='del_bookbestseller' class='none'>
		<%=key1%>,<%=key2%>,<%=key3%>,<%=ref%>,<%=kind%>
	</div>

<%
// #################### end
%>
